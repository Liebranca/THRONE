#!/usr/bin/perl
# ---   *   ---   *   ---
# EDITOR
# For doodling bout
#
# LIBRE SOFTWARE
# Licensed under GNU GPL3
# be a bro and inherit
#
# CONTRIBUTORS
# lyeb,

# ---   *   ---   *   ---
# deps

package main;

  use v5.36.0;
  use strict;
  use warnings;

  use utf8;
  use Readonly;

  use English qw(-no_match_vars);

  use lib $ENV{'ARPATH'}.'/lib/sys/';

  use Style;
  use Arstd::Path;

  use lib $ENV{'ARPATH'}.'/lib/';

  use Lycon::Ctl;
  use Lycon::Loop;
  use Lycon::Gen;

  use GF::Mode::ANSI;

  use lib $ENV{'ARPATH'}.'/THRONE/';

# ---   *   ---   *   ---
# app packages

  use lib dirof(__FILE__);
  use Selector;

# ---   *   ---   *   ---
# info

  our $VERSION = v0.00.5;#b
  our $AUTHOR  = 'IBN-3DILA';

# ---   *   ---   *   ---
# GBL

  my $Cache={

    terminate  => 0,
    refresh    => 0,
    cmode      => 0,

    canvas     => {

      sel   => GF::Vec4->nit(0,0),
      pos   => GF::Vec4->nit(16,9),

      dim   => [[0,16],[0,16]],

      buf   => [],
      cchar => q[ ],

    },

  };

  $Cache->{canvas}->{buf}=[(q[ ]) x (
    $Cache->{canvas}->{dim}->[0]->[1]
  * $Cache->{canvas}->{dim}->[1]->[1]

  )];

# ---   *   ---   *   ---
# triggers control switch

sub switch_ctx() {

  drawcmd(
    Selector::draw_canvas($Cache->{canvas})

  );

  $Cache->{cmode}=1;
  Selector::ctl_take(\&on_refresh);

};

# ---   *   ---   *   ---
# ^restores

sub ctl_take() {
  $Cache->{cmode}=0;

};

# ---   *   ---   *   ---
# put char

sub paint() {

  my $i=Selector::get_curpos(
    $Cache->{canvas}

  );

  my $beg  = Selector::get_color();
     $beg  = graphics()->color($beg);

  my $char = $Selector::Cache->{table}->{cchar};

  my $end  = graphics()->bnw();

  $Cache->{canvas}->{buf}->[$i]="$beg$char$end";

};

# ---   *   ---   *   ---
# keys used by module

Lycon::Ctl::register_events(

  # exit to tty
  escape=>[0,0,sub {
    $Cache->{terminate}=1;

  }],

  # get char selector
  tab=>[\&switch_ctx,0,0],

  # put char at cursor
  ret=>[\&paint,\&paint,0],

  # movement keys
  Lycon::Gen::wasd(

    $Cache->{canvas}->{sel},
    $Cache->{canvas}->{dim},

    tap=>1,
    hel=>1,
    rel=>0,

  ),

);

# ---   *   ---   *   ---
# puts selected on screen

sub draw_cchar() {

  return {
    proc => 'color',
    args => [0x03],

    ct   => 'SEL [' .
      $Selector::Cache->{table}->{cchar} .

    ']',

  };

};

# ---   *   ---   *   ---
# ^shows selected color

sub draw_ccolor() {

  my $color=Selector::get_color();

  return {
    ct   => " | COLOR ",

  },{

    proc => 'color',
    args => [$color],

    ct   => (sprintf "%02X",$color),

  };

};

# ---   *   ---   *   ---
# draws bar at screen bottom

sub draw_ctlbar() {

  my $pos={
    proc=>'mvcur',
    args=>[0x00,0xFF],

  };

  return (

    $pos,

    draw_cchar(),
    draw_ccolor(),

    # ^color off
    {proc => 'bnw'},

  );

};

# ---   *   ---   *   ---
# refreshes the canvas

sub draw_canvas() {

  return (
    Selector::draw_canvas($Cache->{canvas}),
    Selector::draw_highlighted($Cache->{canvas}),

  );

};

# ---   *   ---   *   ---
# state proc

sub on_refresh() {

  my @req=(! $Cache->{cmode})
    ? (draw_canvas(),draw_ctlbar())
    : draw_ctlbar()
    ;

  drawcmd(@req);

};

# ---   *   ---   *   ---
# the bit

my $Main=defmain(

  quit  => sub () {
    return $Cache->{terminate};

  },

  logic => {proc=>\&on_refresh},

);

# ---   *   ---   *   ---
# ^exec

$Main->(

  panic        => 0,

  clear_screen => 1,
  hide_cursor  => 1,
  reset_cursor => 1,

);

# ---   *   ---   *   ---
1; # ret
