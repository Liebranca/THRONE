#!/usr/bin/perl
# ---   *   ---   *   ---
# EDITOR
# For doodling bout
#
# LIBRE SOFTWARE
# Licensed under GNU GPL3
# be a bro and inherit
#
# CONTRIBUTORS
# lyeb,

# ---   *   ---   *   ---
# deps

package main;

  use v5.36.0;
  use strict;
  use warnings;

  use utf8;
  use Readonly;

  use English qw(-no_match_vars);

  use lib $ENV{'ARPATH'}.'/lib/sys/';

  use Style;
  use Arstd::Path;

  use lib $ENV{'ARPATH'}.'/lib/';

  use Lycon::Ctl;
  use Lycon::Loop;
  use Lycon::Gen;

  use GF::Mode::ANSI;

  use lib $ENV{'ARPATH'}.'/THRONE/';

# ---   *   ---   *   ---
# app packages

  use lib dirof(__FILE__);
  use Selector;
  use Inserter;

# ---   *   ---   *   ---
# info

  our $VERSION = v0.00.5;#b
  our $AUTHOR  = 'IBN-3DILA';

# ---   *   ---   *   ---
# GBL

  my $Cache={

    terminate  => 0,
    refresh    => 0,
    cmode      => 0,

    canvas     => $Inserter::Cache->{canvas},

  };

# ---   *   ---   *   ---
# triggers control switch

sub switch_ctx($pkg,$mode,@args) {

  my $fn="$pkg\::ctl_take";
     $fn=\&$fn;

  $Cache->{cmode}=$mode;
  $fn->(@args);

};

# ---   *   ---   *   ---
# ^ice for showing char
# selection screen

sub run_selector() {

  drawcmd(
    Selector::draw_canvas($Cache->{canvas})

  );

  switch_ctx('Selector',1,\&on_refresh);

};

# ---   *   ---   *   ---
# ^ice for enabling text input

sub run_inserter() {
  switch_ctx('Inserter',2);

};

# ---   *   ---   *   ---
# restores control to package

sub ctl_take() {
  $Cache->{cmode}=0;

};

# ---   *   ---   *   ---
# put char

sub paint() {

  my $i=Selector::get_curpos(
    $Cache->{canvas}

  );

  Inserter::putc(
    $Selector::Cache->{table}->{cchar},
    $Cache->{canvas}

  );

};

# ---   *   ---   *   ---
# keys used by module

Lycon::Ctl::register_events(

  # exit to tty
  escape=>[0,0,sub {
    $Cache->{terminate}=1;

  }],

  # mode switches
  tab => [\&run_selector,0,0],
  i   => [\&run_inserter,0,0],

  # put char at cursor
  ret=>[\&paint,\&paint,0],

  # movement keys
  Lycon::Gen::wasd(

    $Cache->{canvas}->{sel},
    $Cache->{canvas}->{dim},

    tap=>1,
    hel=>1,
    rel=>0,

  ),

);

# ---   *   ---   *   ---
# puts selected on screen

sub draw_cchar() {

  return {
    proc => 'color',
    args => [0x03],

    ct   =>
      'SEL ['
    . $Selector::Cache->{table}->{cchar}

    . '] | '
    . (sprintf "%03X",ord(
        $Selector::Cache->{table}->{cchar}

    )),

  };

};

# ---   *   ---   *   ---
# ^shows selected color

sub draw_ccolor() {

  my $color=Selector::get_color();

  return {
    ct   => " | COLOR ",

  },{

    proc => 'color',
    args => [$color],

    ct   => (sprintf "%02X",$color),

  };

};

# ---   *   ---   *   ---
# draws bar at screen bottom

sub draw_ctlbar() {

  my $pos={
    proc=>'mvcur',
    args=>[0x00,0xFF],

  };

  return (

    $pos,

    draw_cchar(),
    draw_ccolor(),

    # ^color off
    {proc => 'bnw'},

  );

};

# ---   *   ---   *   ---
# state proc

sub on_refresh() {

  my @req=(! $Cache->{cmode})
    ? (Inserter::draw_canvas(),draw_ctlbar())
    : draw_ctlbar()
    ;

  drawcmd(@req);

};

# ---   *   ---   *   ---
# the bit

my $Main=defmain(

  quit  => sub () {
    return $Cache->{terminate};

  },

  logic => {proc=>\&on_refresh},

);

# ---   *   ---   *   ---
# ^exec

$Main->(

  panic        => 0,

  clear_screen => 1,
  hide_cursor  => 1,
  reset_cursor => 1,

);

# ---   *   ---   *   ---
1; # ret
