#!/usr/bin/perl
# ---   *   ---   *   ---
# EDITOR
# For doodling bout
#
# LIBRE SOFTWARE
# Licensed under GNU GPL3
# be a bro and inherit
#
# CONTRIBUTORS
# lyeb,

# ---   *   ---   *   ---
# deps

package main;

  use v5.36.0;
  use strict;
  use warnings;

  use utf8;
  use Readonly;

  use English qw(-no_match_vars);

  use lib $ENV{'ARPATH'}.'/lib/sys/';

  use Style;
  use Arstd::Path;

  use lib $ENV{'ARPATH'}.'/lib/';

  use Lycon::Ctl;
  use Lycon::Loop;
  use Lycon::Gen;
  use Lycon::Kbd;

  use GF::Mode::ANSI;

  use lib $ENV{'ARPATH'}.'/THRONE/';

# ---   *   ---   *   ---
# app packages

  use lib dirof(__FILE__);

  use Canvas;
  use Selector;
  use Inserter;

# ---   *   ---   *   ---
# info

  our $VERSION = v0.00.5;#b
  our $AUTHOR  = 'IBN-3DILA';

# ---   *   ---   *   ---
# ROM

  Readonly my $RUN_OPTS=>{

    panic        => 0,

    clear_screen => 1,
    hide_cursor  => 1,
    reset_cursor => 1,

  };

# ---   *   ---   *   ---
# GBL

  my $Cache={

    terminate  => 0,
    refresh    => 0,
    cmode      => 0,

    canvas     => $Inserter::Cache->{canvas},

  };

# ---   *   ---   *   ---
# show char selection screen

sub call_selector() {

  drawcmd(
    $Cache->{canvas}->draw(0)

  );

  ctl_switch('Selector',\&draw);

};

# ---   *   ---   *   ---
# enable text input

sub call_inserter() {
  ctl_switch('Inserter');

};

# ---   *   ---   *   ---
# generate control transfers

Lycon::Ctl::register_xfers(

  ret => sub {
    $Cache->{cmode}=0;

  },

  switch => sub ($pkg) {

    state $tab={
      'Selector'=>1,
      'Inserter'=>2,

    };

    $Cache->{cmode}=$tab->{$pkg};

  },

);

# ---   *   ---   *   ---
# keys used by module

Lycon::Ctl::register_events(

  # exit to tty
  q=>[0,0,sub {
    $Cache->{terminate}=keyhel('LCtrl');

  }],

  LCtrl=>[0,0,0],

  # mode switches
  tab => [\&call_selector,0,0],
  i   => [\&call_inserter,0,0],

  # put/clear char at cursor
  ret   => [\&putc,\&putc,0],
  space => [\&popc,\&popc,0],

  # movement keys
  Lycon::Gen::wasd(
    \$Cache->{canvas},'sel','dim'

  ),

);

# ---   *   ---   *   ---
# put char

sub putc() {

  Inserter::putc(
    $Selector::Cache->{table}->{cchar},
    $Cache->{canvas}

  );

};

# ---   *   ---   *   ---
# ^remove

sub popc() {
  Inserter::putc($NULLSTR,$Cache->{canvas});

};

# ---   *   ---   *   ---
# state proc

sub draw() {
  Inserter::draw($Cache->{cmode});

};

# ---   *   ---   *   ---
# the bit

my $Main=defmain(

  quit  => sub () {
    return $Cache->{terminate};

  },

  logic => {proc=>\&draw},

);

Selector::kick();

# ---   *   ---   *   ---
# ^exec

$Main->(%$RUN_OPTS);

# ---   *   ---   *   ---
1; # ret
