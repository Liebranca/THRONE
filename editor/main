#!/usr/bin/perl
# ---   *   ---   *   ---
# EDITOR
# For doodling bout
#
# LIBRE SOFTWARE
# Licensed under GNU GPL3
# be a bro and inherit
#
# CONTRIBUTORS
# lyeb,

# ---   *   ---   *   ---
# deps

package main;

  use v5.36.0;
  use strict;
  use warnings;

  use utf8;
  use Readonly;

  use English qw(-no_match_vars);

  use lib $ENV{'ARPATH'}.'/lib/sys/';

  use Style;
  use Arstd::Path;

  use lib $ENV{'ARPATH'}.'/lib/';

  use Lycon::Ctl;
  use Lycon::Loop;

  use GF::Mode::ANSI;

  use lib $ENV{'ARPATH'}.'/THRONE/';

# ---   *   ---   *   ---
# app packages

  use lib dirof(__FILE__);
  use Selector;

# ---   *   ---   *   ---
# info

  our $VERSION = v0.00.3;#b
  our $AUTHOR  = 'IBN-3DILA';

# ---   *   ---   *   ---
# GBL

  my $Cache={

    terminate => 0,
    refresh   => 0,
    cmode     => 0,

  };

# ---   *   ---   *   ---
# triggers control switch

sub switch_ctx() {
  Selector::ctl_take();

};

# ---   *   ---   *   ---
# put char

sub paint() {
  say "\e[64H$Selector::Cache->{cchar}\r";

};

# ---   *   ---   *   ---
# keys used by module

Lycon::Ctl::register_events(

  escape=>[0,0,sub {
    $Cache->{terminate}=1;

  }],

  ret=>[\&paint,\&paint,0],
  tab=>[\&switch_ctx,0,0],

);

# ---   *   ---   *   ---
# puts selected on screen

sub draw_cchar() {

  my $pos={
    proc=>'mvcur',
    args=>[0x00,0xFF],

  };

  my $color={
    proc => 'color',
    args => [0x03],

    ct   => 'SEL [' .
      $Selector::Cache->{cchar} .

    ']',

  };

  return (

    # move and color on
    $pos,
    $color,

    # ^color off
    {proc => 'bnw'}

  );

};

# ---   *   ---   *   ---
# state proc

sub each_frame() {

  drawcmd(
    draw_cchar(),

  );

};

# ---   *   ---   *   ---
# the bit

my $main=defmain(

  quit  => sub () {
    return $Cache->{terminate};

  },

  logic => {proc=>\&each_frame},

);

# ---   *   ---   *   ---
# ^exec

$main->(

  panic        => 0,

  clear_screen => 1,
  hide_cursor  => 1,
  reset_cursor => 1,

);

# ---   *   ---   *   ---
1; # ret
