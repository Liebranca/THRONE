#!/usr/bin/perl
#
# dicerolls
#
# ---   *   ---   *   ---

# deps

  use v5.36.0;
  use strict;
  use warnings;

  use Time::HiRes qw(usleep);
  use English qw(-no_match_vars);

  use lib $ENV{'ARPATH'}.'/lib/sys/';
  use Style;

  use lib $ENV{'ARPATH'}.'/lib/';

  use GF::Icon;
  use GF::Mode::ANSI;

  use lib $ENV{'ARPATH'}.'/THRONE/';

  use RPG::Dice;

  use RPG::Cell;
  use RPG::Actor;
  use RPG::Magic;
  use RPG::Spell;

# ---   *   ---   *   ---
# create effects

sub damage($M) {

  my $dmg   = $M->{mag}/2;

  my $attrs = $M->{dst}->{attrs};
  my $key   = $M->{self}->key();

  $attrs->{$key}->mod_current(-$dmg);

};

# ---   *   ---   *   ---
# give health back

sub heal($M) {

  my $dmg   = $M->{mag}/2;

  my $attrs = $M->{dst}->{attrs};
  my $key   = $M->{self}->key();

  $attrs->{$key}->mod_current($dmg);

};

# ---   *   ---   *   ---
# ^passive

sub heal_tick($M) {

  my $mag=$M->{mag};
  $M->{mag}=$mag/$M->{spell}->{dur};

  heal($M);

  $M->{mag}=$mag;

};

# ---   *   ---   *   ---
# divine inspiration

sub _bless($M) {

  $M->{bless_mag}//=$M->{mag};

  my $dice = $M->{spell}->{dice};
  my $mag  = $M->{bless_mag};

  my $res  = $dice->{sides} * $dice->{num};
  my $buff = 1*($mag/$res);

  $M->{mag}+=$buff;

};

# ---   *   ---   *   ---
# sacrifice HP for greater power!

sub evil($M) {

  my $dice = $M->{spell}->{dice};

  my $dst  = $M->{dst};
  my $mag  = $M->{mag};

  my $res  = $dice->{sides} * $dice->{num};
  my $dmg  = $res-($res-$mag);

  $M->{mag} = 2/($dmg/$res);
  $M->{dst} = $M->{src};

  damage($M);

  $M->{mag} = $mag * 1.5;
  $M->{dst} = $dst;

};

# ---   *   ---   *   ---
# DOT

sub set_bar_color($dst,$key,$color) {

  my $attr = $dst->{attrs}->{$key};
  my $old  = $attr->{bar}->{color};

  $attr->{bar}->{color}=$color;
  $attr->{bar}->update_animar();

  return $old;

};

sub poison($M) {

  $M->{poison_end}  //= set_bar_color(

    $M->{dst},
    $M->{self}->key(),

    0b00110001,

  );

};

# ---   *   ---   *   ---
# ^linger

sub poison_tick($M) {

  $M->{poison_mag}//=$M->{mag};

  my ($mag,$old)=(
    $M->{poison_mag},
    $M->{mag}

  );

  $M->{mag}=$mag/2;
  damage($M);

  print

    "\e[0H\e[0K$M->{dst}->{name} takes "
  . "$M->{mag} "

  . "poison damage!"

  ;

  $mag+=$mag*0.25;

  $M->{poison_mag} = $mag;
  $M->{mag}        = $old;


  if(1 == $M->{dur} && exists $M->{poison_end}) {

    set_bar_color(

      $M->{dst},
      $M->{poison_self}->key(),

      $M->{poison_end},

    );

    delete $M->{poison_end};

  };

};

# ---   *   ---   *   ---
# buff test

sub hearten($M) {

  my $key   = $M->{self}->key();
  my $spell = $M->{spell};
  my $attrs = $M->{src}->{attrs};

  $attrs->{$key}->add_modifiers(
    $spell->{name}=>$M->{mag}

  );

};

sub hearten_tick($M) {

  if(1 == $M->{dur}) {

    my $key  = $M->{self}->key();
    my $attr = $M->{src}->{attrs}->{$key};

    $attr->clear_modifiers(
      $M->{spell}->{name}

    );

  };

};

# ---   *   ---   *   ---
# ^add to table

RPG::Magic->new(

  'attack' => \&damage,

  tab=>{
    key=>'hp',

  },

);

RPG::Magic->new(
  'bless' => \&_bless,

);

RPG::Magic->new(

  'evil' => \&evil,

  tab=>{
    key=>'hp',

  },

);

RPG::Magic->new(

  'poison' => \&poison,

  tab=>{
    key=>'hp',

  },

  tick=>\&poison_tick,

);

RPG::Magic->new(

  'heal' => \&heal,

  tab=>{
    key=>'hp'

  },

  tick=>\&heal_tick,

);

RPG::Magic->new(

  'hearten' => \&hearten,

  tab=>{
    key=>'hp'

  },

  tick=>\&hearten_tick,

);

# ---   *   ---   *   ---
# ^fill out the grimoire

RPG::Spell->new(

  name   => 'Slash',
  school => 'Combat',

  degree => 0,
  eff    => ['attack'],

  desc   => 'Cuts your target!',

);

RPG::Spell->new(

  name   => 'Snake Venom',
  school => 'Night',

  degree => 3,
  dur    => 3,

  eff    => ['evil','poison','attack'],

  desc   => 'Damages the enemy over time',

  anim   => [chr(0x186)],
  color  => 0b00110001,

);

RPG::Spell->new(

  name   => 'Smite',
  schhol => 'Faith',

  degree => 2,
  eff    => ['bless','bless','attack'],

  desc   => 'Doubly righteous attack',

  anim   => [chr(0x1D7)],
  color  => 0xFE,

);

RPG::Spell->new(

  name   => 'Holy Slash',
  school => 'Faith',

  degree => 1,
  eff    => ['bless','attack'],

  desc   => 'Cuts your target -- righteously!',

);

RPG::Spell->new(

  name   => 'Unholy Slash',
  school => 'Evil',

  degree => 2,
  eff    => ['bless','evil','attack'],

  desc   => 'Cuts your target -- maliciously!',

  anim   => [chr(0x1D8)],
  color  => 0b01100011,

);

RPG::Spell->new(

  name   => 'Prayer',
  school => 'Faith',

  degree => 3,
  dur    => 2,

  eff    => ['bless','hearten','heal'],

  desc   => 'Increases HP and HP regen',

);

# ---   *   ---   *   ---
# make map

my $arena=RPG::Cell->new(

  'imp_arena_00',

  name => 'The Imperium Arena',
  co   => [0,0],

);

# ---   *   ---   *   ---
# make dudes

my $jack=RPG::Actor->new(

  name => 'Jack',

  cell => $arena,
  pos  => [0,0],

  grim => ['Slash','Holy Slash','Smite'],

);

my $jane=RPG::Actor->new(

  name => 'Jane',

  cell => $arena,
  pos  => [2,3],

  grim => ['Slash','Unholy Slash','Snake Venom'],

);

# ---   *   ---   *   ---
# switchable viewpoints

my @actors = ($jack,$jane);

my %inia   = map {
  $ARG=>RPG::Dice->roll('1d20')

} 'jack','jane';

my $self  = ($inia{jack} > $inia{jane})
  ? $jack
  : $jane
  ;

my $other = ($self eq $jane)
  ? $jack
  : $jane
  ;

# ---   *   ---   *   ---
# drawing bars

my $f=GF::Mode::ANSI->new_frame();
print $f->encur(0);

sub draw_bars(@actors) {

  while(1) {

    my $co     = [0,3];
    my $redraw = 0;

    map {

      my ($updated,@cmd)=
        $ARG->draw_bars(pos=>$co);

      $redraw|=$updated;
      $f->req(@cmd);

    } @actors;

    $f->draw();
    usleep(10000);


    last if ! $redraw;

  };

};

# ---   *   ---   *   ---
# simulate battle

while(

   $self->alive()
&& $other->alive()

) {

  print "\e[0H\e[0J";

  my $spell=$self->take_turn() or last;
  draw_bars($jane,$jack);


  $self->cast($spell->{name},$other);

  print

    "\e[0H\e[0K"

  . "$self->{name} uses "
  . "$spell->{name} "

  . "on $other->{name}!"

  ;

  draw_bars($jane,$jack);

  usleep(20000);
  ($self,$other)=($other,$self);

};

# ---   *   ---   *   ---
# ^aftermath

$self->take_turn();
$other->take_turn();

draw_bars($jane,$jack);
say "\e[20H\e[0K";

my @victor=grep {$ARG->alive()} ($jane,$jack);
my @defeat=grep {! $ARG->alive()} ($jane,$jack);

map {
  say "$ARG->{name} died an inglorious death!"

} @defeat;

map {
  say "$ARG->{name} is victorious!"

} @victor;

say "Everyone is dead! ASFAIMAS rejoices!"
if ! @victor;

print $f->encur(1);

# ---   *   ---   *   ---
1; # ret
