#!/usr/bin/perl
# ---   *   ---   *   ---
# THRONE
# Small RTS
#
# LIBRE SOFTWARE
# Licensed under GNU GPL3
# be a bro and inherit
#
# CONTRIBUTORS
# lyeb,
# ---   *   ---   *   ---

# deps
package main;

  use v5.36.0;
  use strict;
  use warnings;

  use lib $ENV{'ARPATH'}.'/lib/';

  use Lycon::Ctl;
  use Lycon::Loop;

  use GF::Mode::ANSI;

  use lib $ENV{'ARPATH'}.'/THRONE/';

  use RPG::Cell;
  use RPG::Actor;

# ---   *   ---   *   ---
# GBL

  my $Cache={
    terminate => 0,
    refresh   => 0,

  };

  my $Map  = RPG::Cell->grid();
  my $Fact = RPG::Actor->faction();

  my $Char = $Fact->member($Map,[0,0]);
  my $Rock = $Fact->member($Map,[7,0],sprite=>q[#]);

# ---   *   ---   *   ---

sub sim_step() {};

sub on_refresh() {

  drawcmd(
    $Map->sput(),

  );

};

# ---   *   ---   *   ---
# movement keys

sub mvlft() {
  drawcmd($Char->move(-1,0));

};

sub mvrgt() {
  drawcmd($Char->move(1,0));

};

sub mvbak() {
  drawcmd($Char->move(0,1));

};

sub mvfwd() {
  drawcmd($Char->move(0,-1));

};

# ---   *   ---   *   ---

Lycon::Ctl::register_events(

  escape=>[0,0,sub {
    $Cache->{terminate}=1;

  }],

  space=>[\&sim_step,0,0],

  w=>[\&mvfwd,0,0],
  a=>[\&mvlft,0,0],
  s=>[\&mvbak,0,0],
  d=>[\&mvrgt,0,0],

);

# ---   *   ---   *   ---

my $main=defmain(

  quit     => sub {
    return $Cache->{terminate};

  },

  logic    => {
    proc=>\&on_refresh,

  },

);

drawcmd(
  {proc=>'clear'},
  $Map->sput(),

);

$main->(panic=>0);

# ---   *   ---   *   ---
1; # ret
